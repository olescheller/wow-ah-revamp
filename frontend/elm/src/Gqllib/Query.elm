-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gqllib.Query exposing (ItemClassRequiredArguments, ItemRequiredArguments, ItemSupplyRequiredArguments, ItemsCountRequiredArguments, ItemsPriceRequiredArguments, ItemsRequiredArguments, ItemsSupplyRequiredArguments, SellOrderRequiredArguments, UserRequiredArguments, item, item_class, item_supply, items, items_count, items_price, items_supply, randomItems, sell_order, user)

import Gqllib.InputObject
import Gqllib.Interface
import Gqllib.Object
import Gqllib.Scalar
import Gqllib.ScalarCodecs
import Gqllib.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ItemRequiredArguments =
    { id : Float }


{-|

  - id -

-}
item : ItemRequiredArguments -> SelectionSet decodesTo Gqllib.Object.Item -> SelectionSet (Maybe decodesTo) RootQuery
item requiredArgs object_ =
    Object.selectionForCompositeField "item" [ Argument.required "id" requiredArgs.id Encode.float ] object_ (identity >> Decode.nullable)


type alias ItemsRequiredArguments =
    { partialItemName : String }


{-|

  - partialItemName -

-}
items : ItemsRequiredArguments -> SelectionSet decodesTo Gqllib.Object.Item -> SelectionSet (List (Maybe decodesTo)) RootQuery
items requiredArgs object_ =
    Object.selectionForCompositeField "items" [ Argument.required "partialItemName" requiredArgs.partialItemName Encode.string ] object_ (identity >> Decode.nullable >> Decode.list)


type alias ItemClassRequiredArguments =
    { id : Float }


{-|

  - id -

-}
item_class : ItemClassRequiredArguments -> SelectionSet decodesTo Gqllib.Object.ItemClass -> SelectionSet decodesTo RootQuery
item_class requiredArgs object_ =
    Object.selectionForCompositeField "item_class" [ Argument.required "id" requiredArgs.id Encode.float ] object_ identity


type alias ItemSupplyRequiredArguments =
    { itemName : String }


{-|

  - itemName -

-}
item_supply : ItemSupplyRequiredArguments -> SelectionSet decodesTo Gqllib.Object.ItemSupply -> SelectionSet (Maybe decodesTo) RootQuery
item_supply requiredArgs object_ =
    Object.selectionForCompositeField "item_supply" [ Argument.required "itemName" requiredArgs.itemName Encode.string ] object_ (identity >> Decode.nullable)


type alias ItemsSupplyRequiredArguments =
    { partialItemName : String }


{-|

  - partialItemName -

-}
items_supply : ItemsSupplyRequiredArguments -> SelectionSet decodesTo Gqllib.Object.ItemSupply -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
items_supply requiredArgs object_ =
    Object.selectionForCompositeField "items_supply" [ Argument.required "partialItemName" requiredArgs.partialItemName Encode.string ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ItemsCountRequiredArguments =
    { partialItemName : String }


{-|

  - partialItemName -

-}
items_count : ItemsCountRequiredArguments -> SelectionSet (Maybe Int) RootQuery
items_count requiredArgs =
    Object.selectionForField "(Maybe Int)" "items_count" [ Argument.required "partialItemName" requiredArgs.partialItemName Encode.string ] (Decode.int |> Decode.nullable)


type alias ItemsPriceRequiredArguments =
    { itemId : Float
    , amount : Int
    }


{-|

  - itemId -
  - amount -

-}
items_price : ItemsPriceRequiredArguments -> SelectionSet decodesTo Gqllib.Object.Price -> SelectionSet (Maybe decodesTo) RootQuery
items_price requiredArgs object_ =
    Object.selectionForCompositeField "items_price" [ Argument.required "itemId" requiredArgs.itemId Encode.float, Argument.required "amount" requiredArgs.amount Encode.int ] object_ (identity >> Decode.nullable)


type alias UserRequiredArguments =
    { name : String
    , realm : String
    }


{-|

  - name -
  - realm -

-}
user : UserRequiredArguments -> SelectionSet decodesTo Gqllib.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
user requiredArgs object_ =
    Object.selectionForCompositeField "user" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "realm" requiredArgs.realm Encode.string ] object_ (identity >> Decode.nullable)


{-| -}
randomItems : SelectionSet decodesTo Gqllib.Object.InventoryItem -> SelectionSet (List (Maybe decodesTo)) RootQuery
randomItems object_ =
    Object.selectionForCompositeField "randomItems" [] object_ (identity >> Decode.nullable >> Decode.list)


type alias SellOrderRequiredArguments =
    { userName : String
    , realmName : String
    }


{-|

  - userName -
  - realmName -

-}
sell_order : SellOrderRequiredArguments -> SelectionSet decodesTo Gqllib.Object.SellOrder -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
sell_order requiredArgs object_ =
    Object.selectionForCompositeField "sell_order" [ Argument.required "userName" requiredArgs.userName Encode.string, Argument.required "realmName" requiredArgs.realmName Encode.string ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)
