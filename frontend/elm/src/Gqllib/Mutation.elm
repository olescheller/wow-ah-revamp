-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gqllib.Mutation exposing (AddItemToSellOrderRequiredArguments, BuyItemsOptionalArguments, BuyItemsRequiredArguments, CreateSellOrderRequiredArguments, CreateUserRequiredArguments, RemoveSellOrderRequiredArguments, addItemToSellOrder, buyItems, createSellOrder, createUser, fakeBuyMutation, removeSellOrder)

import Gqllib.InputObject
import Gqllib.Interface
import Gqllib.Object
import Gqllib.Scalar
import Gqllib.ScalarCodecs
import Gqllib.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateUserRequiredArguments =
    { name : String }


{-|

  - name -

-}
createUser : CreateUserRequiredArguments -> SelectionSet decodesTo Gqllib.Object.User -> SelectionSet decodesTo RootMutation
createUser requiredArgs object_ =
    Object.selectionForCompositeField "createUser" [ Argument.required "name" requiredArgs.name Encode.string ] object_ identity


{-| -}
fakeBuyMutation : SelectionSet decodesTo Gqllib.Object.Price -> SelectionSet (Maybe decodesTo) RootMutation
fakeBuyMutation object_ =
    Object.selectionForCompositeField "fakeBuyMutation" [] object_ (identity >> Decode.nullable)


type alias BuyItemsOptionalArguments =
    { itemId : OptionalArgument Int }


type alias BuyItemsRequiredArguments =
    { userName : String
    , amount : Int
    , total : Float
    , perUnit : Float
    }


{-|

  - userName -
  - itemId -
  - amount -
  - total -
  - perUnit -

-}
buyItems : (BuyItemsOptionalArguments -> BuyItemsOptionalArguments) -> BuyItemsRequiredArguments -> SelectionSet decodesTo Gqllib.Object.Receipt -> SelectionSet (Maybe decodesTo) RootMutation
buyItems fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { itemId = Absent }

        optionalArgs =
            [ Argument.optional "itemId" filledInOptionals.itemId Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "buyItems" (optionalArgs ++ [ Argument.required "userName" requiredArgs.userName Encode.string, Argument.required "amount" requiredArgs.amount Encode.int, Argument.required "total" requiredArgs.total Encode.float, Argument.required "perUnit" requiredArgs.perUnit Encode.float ]) object_ (identity >> Decode.nullable)


type alias CreateSellOrderRequiredArguments =
    { itemId : Int
    , seller_name : String
    , seller_realm : String
    , quantity : Int
    , price : Float
    }


{-|

  - itemId -
  - seller\_name -
  - seller\_realm -
  - quantity -
  - price -

-}
createSellOrder : CreateSellOrderRequiredArguments -> SelectionSet decodesTo Gqllib.Object.SellOrder -> SelectionSet decodesTo RootMutation
createSellOrder requiredArgs object_ =
    Object.selectionForCompositeField "createSellOrder" [ Argument.required "itemId" requiredArgs.itemId Encode.int, Argument.required "seller_name" requiredArgs.seller_name Encode.string, Argument.required "seller_realm" requiredArgs.seller_realm Encode.string, Argument.required "quantity" requiredArgs.quantity Encode.int, Argument.required "price" requiredArgs.price Encode.float ] object_ identity


type alias AddItemToSellOrderRequiredArguments =
    { itemId : Int
    , seller_name : String
    , seller_realm : String
    , quantity : Int
    }


{-|

  - itemId -
  - seller\_name -
  - seller\_realm -
  - quantity -

-}
addItemToSellOrder : AddItemToSellOrderRequiredArguments -> SelectionSet decodesTo Gqllib.Object.SellOrder -> SelectionSet decodesTo RootMutation
addItemToSellOrder requiredArgs object_ =
    Object.selectionForCompositeField "addItemToSellOrder" [ Argument.required "itemId" requiredArgs.itemId Encode.int, Argument.required "seller_name" requiredArgs.seller_name Encode.string, Argument.required "seller_realm" requiredArgs.seller_realm Encode.string, Argument.required "quantity" requiredArgs.quantity Encode.int ] object_ identity


type alias RemoveSellOrderRequiredArguments =
    { itemId : Int
    , seller_name : String
    , seller_realm : String
    }


{-|

  - itemId -
  - seller\_name -
  - seller\_realm -

-}
removeSellOrder : RemoveSellOrderRequiredArguments -> SelectionSet Bool RootMutation
removeSellOrder requiredArgs =
    Object.selectionForField "Bool" "removeSellOrder" [ Argument.required "itemId" requiredArgs.itemId Encode.int, Argument.required "seller_name" requiredArgs.seller_name Encode.string, Argument.required "seller_realm" requiredArgs.seller_realm Encode.string ] Decode.bool
